name: Integration Test
on:
  push:
    branches:
      - main
jobs:
  integration-test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Run Node.js project
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Wait for MySQL to be ready
        run: |
          until nc -z -v -w30 localhost 3306
          do
            echo "Waiting for MySQL to be ready..."
            sleep 5
          done
      - name: Install project dependencies
        run: npm install
      - name: Set up .env
        run: echo "${{ secrets.ENV_FILE_CONTENT }}" > .env
      - name: Run Integration tests
        run: npm test
      - name: Build Artifats
        run: npm run build
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: my-repo
          path: |
            dist/main.js
            .env
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY_ID }}
          aws-region: us-east-1
          aws-profile: github_user
      - name: Install Packer
        run: |
          wget https://releases.hashicorp.com/packer/1.8.5/packer_1.8.5_linux_amd64.zip
          unzip packer_1.8.5_linux_amd64.zip
          sudo mv packer /usr/local/bin/packer
          packer --version
        shell: bash
      - name: Init Packer
        run: packer init .
      - name: Build Packer
        run: |
          packer build .
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_DEMO_ACCESS_KEY }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_DEMO_SECRET_KEY }}
          export AWS_DEFAULT_REGION="us-east-1"

          ami_id=$(cat manifest.json | grep artifact_id | cut -d ":" -f 3 | tr -d '",')
          TEMPLATE_NAME="my-launch-template"
          OLD_VERSION=1

          autoscaling_group_name="myAutoScalingGroup"

          echo $ami_id
          echo $TEMPLATE_NAME
          echo $OLD_VERSION

          aws ec2 describe-launch-template-versions --launch-template-name $TEMPLATE_NAME --versions $OLD_VERSION

          new_template_version=$(aws ec2 create-launch-template-version --source-version $OLD_VERSION --launch-template-name $TEMPLATE_NAME --launch-template-data "ImageId=$ami_id" --version-description "v2" --query 'LaunchTemplateVersion.VersionNumber' --output text)
          echo "New Launch Template Version: $new_template_version"

          aws autoscaling update-auto-scaling-group --auto-scaling-group-name $autoscaling_group_name --launch-template LaunchTemplateName="$TEMPLATE_NAME", Version="$new_template_version"

          instance_refresh_id=$(aws autoscaling start-instance-refresh --auto-scaling-group-name $autoscaling_group_name --strategy "Rolling" --query 'InstanceRefreshId' --output text)
